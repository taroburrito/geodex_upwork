webpackHotUpdate(0,{

/***/ 582:
/***/ function(module, exports, __webpack_require__) {

	eval("/* WEBPACK VAR INJECTION */(function(module) {/* REACT HOT LOADER */ if (true) { (function () { var ReactHotAPI = __webpack_require__(3), RootInstanceProvider = __webpack_require__(11), ReactMount = __webpack_require__(13), React = __webpack_require__(67); module.makeHot = module.hot.data ? module.hot.data.makeHot : ReactHotAPI(function () { return RootInstanceProvider.getRootInstances(ReactMount); }, React); })(); } try { (function () {\n\n'use strict';\n\nObject.defineProperty(exports, '__esModule', {\n  value: true\n});\n\nvar _createClass = (function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ('value' in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; })();\n\nvar _get = function get(_x, _x2, _x3) { var _again = true; _function: while (_again) { var object = _x, property = _x2, receiver = _x3; _again = false; if (object === null) object = Function.prototype; var desc = Object.getOwnPropertyDescriptor(object, property); if (desc === undefined) { var parent = Object.getPrototypeOf(object); if (parent === null) { return undefined; } else { _x = parent; _x2 = property; _x3 = receiver; _again = true; desc = parent = undefined; continue _function; } } else if ('value' in desc) { return desc.value; } else { var getter = desc.get; if (getter === undefined) { return undefined; } return getter.call(receiver); } } };\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError('Cannot call a class as a function'); } }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== 'function' && superClass !== null) { throw new TypeError('Super expression must either be null or a function, not ' + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nvar _react = __webpack_require__(67);\n\nvar _react2 = _interopRequireDefault(_react);\n\nvar _AdminSidebar = __webpack_require__(561);\n\nvar _AdminSidebar2 = _interopRequireDefault(_AdminSidebar);\n\nvar _actionsPageActions = __webpack_require__(395);\n\nvar _reactRedux = __webpack_require__(373);\n\nvar initialFormState = {\n  errorMessage: null\n};\n\nvar EditPage = (function (_Component) {\n  _inherits(EditPage, _Component);\n\n  function EditPage(props) {\n    _classCallCheck(this, EditPage);\n\n    _get(Object.getPrototypeOf(EditPage.prototype), 'constructor', this).call(this, props);\n\n    this.state = Object.assign({}, initialFormState);\n    this.handleClickUpdate = this.handleClickUpdate.bind(this);\n\n    var dispatch = this.props.dispatch;\n\n    if (this.props.params.id) {\n      dispatch((0, _actionsPageActions.getPageById)(this.props.params.id));\n    }\n  }\n\n  _createClass(EditPage, [{\n    key: 'componentWillMount',\n    value: function componentWillMount() {\n      //  console.log(\"rrr\");\n\n    }\n  }, {\n    key: 'componentDidMount',\n    value: function componentDidMount() {\n      var pageData = this.props.pageData;\n\n      //console.log(pageData);\n    }\n  }, {\n    key: 'handleClickUpdate',\n    value: function handleClickUpdate() {\n      var dispatch = this.props.dispatch;\n\n      var formData = {\n        slug: this.refs.slug.getDOMNode().value.trim(),\n        title: this.refs.title.getDOMNode().value.trim(),\n        meta_tags: this.refs.meta_tags.getDOMNode().value.trim(),\n        meta_description: this.refs.meta_description.getDOMNode().value,\n        content: this.refs.content.getDOMNode().value,\n        status: \"1\"\n      };\n      var newState = this.findErrorsInAddPageForm(formData);\n      this.setState(newState);\n      if (!newState.errorMessage) {\n        dispatch((0, _actionsPageActions.updatePage)(this.props.params.id, formData));\n      }\n    }\n  }, {\n    key: 'findErrorsInAddPageForm',\n    value: function findErrorsInAddPageForm(formData) {\n      // Only finding one error at a time.\n      var newState = Object.assign({}, initialFormState);\n      // Checking display name\n      if (formData.title === \"\") {\n        newState.errorMessage = \"Title is required\";\n        this.refs.title.getDOMNode().focus();\n      } else if (formData.meta_tags === \"\") {\n        newState.errorMessage = \"Meta tags are required\";\n        this.refs.meta_tags.getDOMNode().focus();\n      } else if (formData.meta_description === \"\") {\n        newState.errorMessage = \"Meta description is required\";\n        this.refs.meta_description.getDOMNode().focus();\n      } else if (formData.content === \"\") {\n        newState.errorMessage = \"Content is required\";\n        this.refs.content.getDOMNode().focus();\n      }\n\n      return newState;\n    }\n  }, {\n    key: 'onChangeSlugInput',\n    value: function onChangeSlugInput(event) {\n      var dispatch = this.props.dispatch;\n\n      dispatch((0, _actionsPageActions.updateInput)('slug', event.target.value));\n    }\n  }, {\n    key: 'onChangeTitleInput',\n    value: function onChangeTitleInput(event) {\n      var dispatch = this.props.dispatch;\n\n      dispatch((0, _actionsPageActions.updateInput)('title', event.target.value));\n    }\n  }, {\n    key: 'onChangeMetaTagsInput',\n    value: function onChangeMetaTagsInput(event) {\n      var dispatch = this.props.dispatch;\n\n      dispatch((0, _actionsPageActions.updateInput)('meta_tags', event.target.value));\n    }\n  }, {\n    key: 'onChangeMetaDescriptionInput',\n    value: function onChangeMetaDescriptionInput(event) {\n      var dispatch = this.props.dispatch;\n\n      dispatch((0, _actionsPageActions.updateInput)('meta_description', event.target.value));\n    }\n  }, {\n    key: 'onChangeContentInput',\n    value: function onChangeContentInput(event) {\n      var dispatch = this.props.dispatch;\n\n      dispatch((0, _actionsPageActions.updateInput)('content', event.target.value));\n    }\n  }, {\n    key: 'render',\n    value: function render() {\n      var message;\n      if (this.state.errorMessage) {\n        message = _react2['default'].createElement(\n          'div',\n          { className: 'uk-alert uk-alert-danger' },\n          this.state.errorMessage\n        );\n      } else if (this.props.error) {\n        message = _react2['default'].createElement(\n          'div',\n          { className: 'uk-alert uk-alert-danger' },\n          this.props.error\n        );\n      } else if (this.props.success) {\n        message = _react2['default'].createElement(\n          'div',\n          { className: 'uk-alert uk-alert-success' },\n          this.props.success\n        );\n      }\n      var _props = this.props;\n      var pageData = _props.pageData;\n      var handleMessage = _props.handleMessage;\n\n      if (handleMessage.error) {\n        message = _react2['default'].createElement(\n          'div',\n          { className: 'uk-alert uk-alert-danger' },\n          handleMessage.error\n        );\n      }\n      if (handleMessage.success) {\n        message = _react2['default'].createElement(\n          'div',\n          { className: 'uk-alert uk-alert-success' },\n          handleMessage.success\n        );\n      }\n      if (pageData.id) {\n\n        return _react2['default'].createElement(\n          'div',\n          { className: 'tm-middle' },\n          _react2['default'].createElement(\n            'div',\n            { className: 'uk-container-my uk-container-center' },\n            _react2['default'].createElement(\n              'div',\n              { 'data-uk-grid-margin': '', className: 'uk-grid' },\n              _react2['default'].createElement(_AdminSidebar2['default'], null),\n              _react2['default'].createElement(\n                'div',\n                { className: 'tm-main uk-width-medium-3-4' },\n                _react2['default'].createElement(\n                  'div',\n                  { className: 'uk-container uk-container-center' },\n                  _react2['default'].createElement(\n                    'h2',\n                    { className: 'white_heading' },\n                    'Edit page'\n                  ),\n                  message,\n                  _react2['default'].createElement(\n                    'form',\n                    { className: 'uk-form uk-margin uk-form-stacked' },\n                    _react2['default'].createElement(\n                      'fieldset',\n                      null,\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid' },\n                        _react2['default'].createElement(\n                          'div',\n                          { className: 'uk-width-1-1' },\n                          _react2['default'].createElement(\n                            'label',\n                            { className: 'uk-form-label', 'for': 'form-gs-street' },\n                            'Page Slug'\n                          ),\n                          _react2['default'].createElement(\n                            'div',\n                            { className: 'uk-form-controls' },\n                            _react2['default'].createElement('input', { id: '', placeholder: 'Slug', className: 'uk-width-1-1', type: 'text', ref: 'slug', onChange: this.onChangeSlugInput.bind(this), value: pageData.slug })\n                          )\n                        )\n                      ),\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid' },\n                        _react2['default'].createElement(\n                          'div',\n                          { className: 'uk-width-1-1' },\n                          _react2['default'].createElement(\n                            'label',\n                            { className: 'uk-form-label', 'for': 'form-gs-street' },\n                            'Page Title'\n                          ),\n                          _react2['default'].createElement(\n                            'div',\n                            { className: 'uk-form-controls' },\n                            _react2['default'].createElement('input', { id: '', placeholder: 'Title', className: 'uk-width-1-1', type: 'text', ref: 'title', onChange: this.onChangeTitleInput.bind(this), value: pageData.title })\n                          )\n                        )\n                      ),\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid' },\n                        _react2['default'].createElement(\n                          'div',\n                          { className: 'uk-width-1-1' },\n                          _react2['default'].createElement(\n                            'label',\n                            { className: 'uk-form-label', 'for': 'form-gs-street' },\n                            'Meta tags ',\n                            _react2['default'].createElement(\n                              'small',\n                              null,\n                              '(Comma seperated)'\n                            )\n                          ),\n                          _react2['default'].createElement(\n                            'div',\n                            { className: 'uk-form-controls' },\n                            _react2['default'].createElement('input', { id: '', placeholder: 'Meta tags', className: 'uk-width-1-1', type: 'text', ref: 'meta_tags', value: pageData.meta_tags, onChange: this.onChangeMetaTagsInput.bind(this) })\n                          )\n                        )\n                      ),\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid' },\n                        _react2['default'].createElement(\n                          'div',\n                          { className: 'uk-width-1-1' },\n                          _react2['default'].createElement(\n                            'label',\n                            { className: 'uk-form-label', 'for': 'form-gs-street' },\n                            _react2['default'].createElement(\n                              'small',\n                              null,\n                              'Meta Description'\n                            )\n                          ),\n                          _react2['default'].createElement(\n                            'div',\n                            { className: 'uk-form-controls' },\n                            _react2['default'].createElement('textarea', { id: '', className: 'uk-width-1-1', placeholder: 'Meta Description', ref: 'meta_description', value: pageData.meta_description, onChange: this.onChangeMetaDescriptionInput.bind(this) })\n                          )\n                        )\n                      ),\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid' },\n                        _react2['default'].createElement(\n                          'div',\n                          { className: 'uk-width-1-1' },\n                          _react2['default'].createElement(\n                            'label',\n                            { className: 'uk-form-label', 'for': 'form-gs-street' },\n                            _react2['default'].createElement(\n                              'small',\n                              null,\n                              'Page Content'\n                            )\n                          ),\n                          _react2['default'].createElement(\n                            'div',\n                            { className: 'uk-form-controls' },\n                            _react2['default'].createElement('textarea', { id: '', rows: '5', className: 'uk-width-1-1', placeholder: '', ref: 'content', value: pageData.content, onChange: this.onChangeContentInput.bind(this) })\n                          )\n                        )\n                      ),\n                      _react2['default'].createElement(\n                        'div',\n                        { className: 'uk-grid uk-float-right' },\n                        _react2['default'].createElement(\n                          'a',\n                          { className: 'uk-button uk-button-primary uk-float-right', onClick: this.handleClickUpdate },\n                          'Update'\n                        )\n                      )\n                    )\n                  )\n                )\n              )\n            )\n          )\n        );\n      } else {\n        return _react2['default'].createElement(\n          'div',\n          null,\n          'Page not found'\n        );\n      }\n    }\n  }]);\n\n  return EditPage;\n})(_react.Component);\n\nexports['default'] = EditPage;\n\nEditPage.propTypes = {\n  onClickPost: _react.PropTypes.func.isRequired\n};\n\nfunction select(state) {\n  return {\n    pageData: state.getPageData,\n    handleMessage: state.handleMessage\n  };\n}\n\n// Wrap the component to inject dispatch and state into it\nexports['default'] = (0, _reactRedux.connect)(select)(EditPage);\nmodule.exports = exports['default'];\n\n/* REACT HOT LOADER */ }).call(this); } finally { if (true) { (function () { var foundReactClasses = module.hot.data && module.hot.data.foundReactClasses || false; if (module.exports && module.makeHot) { var makeExportsHot = __webpack_require__(385); if (makeExportsHot(module, __webpack_require__(67))) { foundReactClasses = true; } var shouldAcceptModule = true && foundReactClasses; if (shouldAcceptModule) { module.hot.accept(function (err) { if (err) { console.error(\"Cannot not apply hot update to \" + \"EditPage.jsx\" + \": \" + err.message); } }); } } module.hot.dispose(function (data) { data.makeHot = module.makeHot; data.foundReactClasses = foundReactClasses; }); })(); } }\n/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(2)(module)))\n\n//////////////////\n// WEBPACK FOOTER\n// ./components/admin/pages/EditPage.jsx\n// module id = 582\n// module chunks = 0\n//# sourceURL=webpack:///./components/admin/pages/EditPage.jsx?");

/***/ }

})